{"ast":null,"code":"var _jsxFileName = \"/Users/nathantran/Documents/VSCode/thirteen_game/client/src/components/GameRoom.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport Chat from \"./Chat\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction GameRoom({\n  socket\n}) {\n  _s();\n  const location = useLocation();\n  const {\n    username,\n    room,\n    roomSize,\n    newGameId\n  } = location.state || {};\n  console.log(\"Extracted Data:\", {\n    username,\n    room,\n    roomSize\n  }); // Debugging: Log extracted values\n  const [playerCards, setPlayerCards] = useState([]);\n  const [gameId, setGameId] = useState(\"\");\n  const [selectedCard, setSelectedCard] = useState(\"\");\n  const [currentTurn, setCurrentTurn] = useState(false);\n  const [lastPlayedCard, setLastPlayedCard] = useState(\"\");\n\n  // Start Game\n  const startGame = () => {\n    if (roomSize >= 1 && roomSize <= 4) {\n      socket.emit(\"start_game\", {\n        num_players: roomSize,\n        room\n      });\n    } else {\n      console.log(\"Wrong number of players\");\n    }\n  };\n  const playCard = () => {\n    console.log(\"GameId and Card played: \" + gameId + \" \" + selectedCard);\n    socket.emit(\"play_card\", {\n      gameId,\n      selectedCard\n    });\n    setSelectedCard(\"\");\n  };\n  const passTurn = () => {\n    console.log(\"Passing\");\n    socket.emit(\"play_card\", {\n      gameId,\n      selectedCard: \"pass\"\n    });\n  };\n  useEffect(() => {\n    socket.on(\"game_state_update\", data => {\n      console.log(\"Game state updated:\", data);\n      setGameId(data.gameId);\n      setCurrentTurn(data.currentTurn);\n      setLastPlayedCard(data.lastPlayedCard);\n      console.log(\"current turn \" + c);\n    });\n    socket.on(\"player_hand\", data => {\n      console.log(\"Player hand updated:\", data);\n      setPlayerCards(data);\n    });\n    socket.on(\"invalid_move\", data => {\n      alert(data.message);\n    });\n    socket.on(\"player_finished\", data => {\n      // setPlayerCards([]);\n      // setGameStarted(false);\n      alert(`Player ${data.finished} has finished`);\n    });\n    socket.on(\"game_over\", data => {\n      // setPlayerCards([]);\n      // setGameStarted(false);\n      alert(`Game over! Last Place: ${data.finished}`);\n    });\n    if (newGameId) {\n      setGameId(newGameId);\n    }\n    return () => {\n      socket.off(\"begin_game\");\n      socket.off(\"game_state_update\");\n      socket.off(\"player_hand\");\n      socket.off(\"invalid_move\");\n      socket.off(\"player_finished\");\n      socket.off(\"game_over\");\n    };\n  }, [socket, newGameId]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: [\"Game Room: \", room]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Players in Room: \", roomSize]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: currentTurn ? `${currentTurn}'s turn` : \"Waiting for turn...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 85,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: [\"Last Played Card: \", lastPlayedCard || \"Play any card\"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), playerCards.length > 0 && /*#__PURE__*/_jsxDEV(\"div\", {\n      children: /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Your Hand: \", playerCards.join(\" \")]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 90,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n      type: \"text\",\n      placeholder: \"Enter card\",\n      value: selectedCard,\n      onChange: e => setSelectedCard(e.target.value)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 94,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: playCard,\n      children: \"Play Card\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      onClick: passTurn,\n      children: \"Pass\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 101,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Chat, {\n      socket: socket,\n      room: room,\n      username: username\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 103,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n}\n_s(GameRoom, \"KZNXt9iCjhnd8e8SKDP/WhTBGZY=\", false, function () {\n  return [useLocation];\n});\n_c = GameRoom;\nexport default GameRoom;\nvar _c;\n$RefreshReg$(_c, \"GameRoom\");","map":{"version":3,"names":["React","useState","useEffect","useLocation","Chat","jsxDEV","_jsxDEV","GameRoom","socket","_s","location","username","room","roomSize","newGameId","state","console","log","playerCards","setPlayerCards","gameId","setGameId","selectedCard","setSelectedCard","currentTurn","setCurrentTurn","lastPlayedCard","setLastPlayedCard","startGame","emit","num_players","playCard","passTurn","on","data","c","alert","message","finished","off","children","fileName","_jsxFileName","lineNumber","columnNumber","length","join","type","placeholder","value","onChange","e","target","onClick","_c","$RefreshReg$"],"sources":["/Users/nathantran/Documents/VSCode/thirteen_game/client/src/components/GameRoom.js"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport { useLocation } from \"react-router-dom\";\nimport Chat from \"./Chat\";\n\nfunction GameRoom({ socket }) {\n  const location = useLocation();\n  const { username, room, roomSize, newGameId } = location.state || {};\n  console.log(\"Extracted Data:\", { username, room, roomSize }); // Debugging: Log extracted values\n  const [playerCards, setPlayerCards] = useState([]);\n  const [gameId, setGameId] = useState(\"\");\n  const [selectedCard, setSelectedCard] = useState(\"\");\n  const [currentTurn, setCurrentTurn] = useState(false);\n  const [lastPlayedCard, setLastPlayedCard] = useState(\"\");\n\n  // Start Game\n  const startGame = () => {\n    if (roomSize >= 1 && roomSize <= 4) {\n      socket.emit(\"start_game\", { num_players: roomSize, room });\n  \n    } else {\n      console.log(\"Wrong number of players\");\n    }\n  };\n\n  const playCard = () => {\n    console.log(\"GameId and Card played: \" + gameId + \" \" + selectedCard);\n    socket.emit(\"play_card\", { gameId, selectedCard });\n    setSelectedCard(\"\")\n  };\n\n  const passTurn = () => {\n    console.log(\"Passing\");\n    socket.emit(\"play_card\", { gameId, selectedCard: \"pass\" });\n  }\n\n  useEffect(() => {\n    socket.on(\"game_state_update\", (data) => {\n      console.log(\"Game state updated:\", data);\n      setGameId(data.gameId);\n      setCurrentTurn(data.currentTurn);\n      setLastPlayedCard(data.lastPlayedCard);\n      console.log(\"current turn \" + c)\n    });\n\n    socket.on(\"player_hand\", (data) => {\n      console.log(\"Player hand updated:\", data);\n      setPlayerCards(data);\n    })\n\n    socket.on(\"invalid_move\", (data) => {\n      alert(data.message);\n    });\n\n    socket.on(\"player_finished\", (data) => {\n      // setPlayerCards([]);\n      // setGameStarted(false);\n      alert(`Player ${data.finished} has finished`);\n    });\n\n  \n    socket.on(\"game_over\", (data) => {\n      // setPlayerCards([]);\n      // setGameStarted(false);\n      alert(`Game over! Last Place: ${data.finished}`);\n    });\n\n    if (newGameId) {\n      setGameId(newGameId);\n    }\n\n    return () => {\n      socket.off(\"begin_game\");\n      socket.off(\"game_state_update\");\n      socket.off(\"player_hand\");\n      socket.off(\"invalid_move\");\n      socket.off(\"player_finished\");\n      socket.off(\"game_over\");\n    };\n  }, [socket, newGameId]);\n\n  return (\n    <div>\n      <h2>Game Room: {room}</h2>\n      <h3>Players in Room: {roomSize}</h3>\n      <h3>{currentTurn ? `${currentTurn}'s turn` : \"Waiting for turn...\"}</h3>\n      <h3>Last Played Card: {lastPlayedCard || \"Play any card\"}</h3>\n\n      {playerCards.length > 0 && (\n        <div>\n          <p>Your Hand: {playerCards.join(\" \")}</p>\n        </div>\n      )}\n\n      <input\n        type=\"text\"\n        placeholder=\"Enter card\"\n        value={selectedCard}\n        onChange={(e) => setSelectedCard(e.target.value)}\n      />\n      <button onClick={playCard}>Play Card</button>\n      <button onClick={passTurn}>Pass</button>\n\n      <Chat socket={socket} room={room} username={username} />\n    </div>\n  );\n}\n\nexport default GameRoom;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}